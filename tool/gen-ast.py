#!/usr/bin/env python3

import os.path
import sys

def _makeCtorParamType(type):
    if type == 'Token':
        return type + ' const&'
    if type.startswith('List<'):
        itemType = type[5:-1]
        if itemType == 'Token':
            return 'std::vector<' + itemType + '> const&'
        return 'std::vector<std::shared_ptr<' + itemType + '>> const&'
    return 'std::shared_ptr<' + type + '> const&'

def _makeMemVarType(type):
    if type == 'Token':
        return type + ' const'
    if type.startswith('List<'):
        itemType = type[5:-1]
        if itemType == 'Token':
            return 'std::vector<' + itemType + '> const'
        return 'std::vector<std::shared_ptr<' + itemType + '>> const'
    return 'std::shared_ptr<' + type + '> const'

def _defineType(file, baseName, className, fields):
    file.write('class ' + className + ' : public ' + baseName + ' {\n')
    file.write('public:\n')

    # Constructor.
    file.write('    ' + className + '(')
    for index, field in enumerate(fields):
        tokens = [token.strip() for token in field.split(' ')]
        type = _makeCtorParamType(tokens[0])
        name = tokens[1]
        file.write(type + ' ' + name)
        if index < len(fields) - 1:
           file.write(', ')
        else:
           file.write(')\n')

    # Store parameters in fields.
    file.write('        : ')
    for index, field in enumerate(fields):
        name = field.split(' ')[1].strip()
        file.write(name + '{' + name + '}')
        if index < len(fields) - 1:
            file.write(', ')
        else:
            file.write(' {}\n')
    file.write('\n')
    
    # Visitor pattern.
    file.write('    void accept(' + baseName + 'Visitor& visitor) const override {\n')
    file.write('        visitor.visit(*this);\n')
    file.write('    }\n')
    file.write('\n')
    
    # Fields.
    for field in fields:
        tokens = [token.strip() for token in field.split(' ')]
        type = _makeMemVarType(tokens[0]);
        name = tokens[1];
        file.write('    ' + type + ' ' + name + ';\n')
    file.write('};\n')

def _defineVisitor(file, baseName, types):
    file.write('class ' + baseName + 'Visitor {\n')
    file.write('public:\n')
    file.write('    virtual ~' + baseName + 'Visitor() = default;\n')
    file.write('\n')
    for type in types:
        className = type.split(':')[0].strip() + baseName
        file.write('    virtual void visit(' + className + ' const&) = 0;\n')
    file.write('};\n')

def _defineAst(file, headers, baseName, types):
    file.write('// This is auto-generated by ' + os.path.basename(__file__) + '. Do not modify manually.\n')
    file.write('\n')
    file.write('#pragma once\n')
    file.write('\n')
    file.write('#include <memory>\n')
    file.write('#include <vector>\n')
    file.write('\n')
    for header in headers:
        file.write('#include "' + header + '"\n')
    file.write('\n')
    file.write('namespace cloxx {\n')
    file.write('\n')
    
    # Forward declare types.
    for type in types:
        className = type.split(':')[0].strip() + baseName
        file.write('class ' + className + ';\n')
    file.write('\n')
    
    _defineVisitor(file, baseName, types)
    file.write('\n')
    
    # Declare the base class.
    file.write('class ' + baseName + ' {\n')
    file.write('public:\n')
    file.write('    virtual ~' + baseName + '() = default;\n')
    file.write('\n')
    file.write('    virtual void accept(' + baseName + 'Visitor& visitor) const = 0;\n')
    file.write('};\n')
    file.write('\n')
    
    for type in types:
        tokens = type.split(':')
        className = tokens[0].strip() + baseName
        fields = [field.strip() for field in tokens[1].split(',')]
        _defineType(file, baseName, className, fields)
        file.write('\n')
    file.write('} // loxx\n')

def _generateAst(outputDir, headers, baseName, types):
    with open(os.path.join(outputDir, baseName + '.hpp'), 'w') as file:
        _defineAst(file, headers, baseName, types)

if __name__ == '__main__':
    if len(sys.argv) != 2:
        sys.exit('Usage: ' + __file__ + ' dirpath')

    outputDir = sys.argv[1]

    _generateAst(outputDir, ['Token.hpp', 'LoxObject.hpp'], 'Expr', [
        "Assign   : Token name, Expr value",
        "Binary   : Token op, Expr left, Expr right",
        "Call     : Expr callee, Token paren, List<Expr> args",
        "Get      : Expr object, Token name",
        "Grouping : Expr expr",
        "Literal  : LoxObject value",
        "Logical  : Token op, Expr left, Expr right",
        "Set      : Expr object, Token name, Expr value",
        "This     : Token keyword",
        "Super    : Token keyword, Token method",
        "Unary    : Token op, Expr right",
        "Variable : Token name",
    ])

    _generateAst(outputDir, ['Token.hpp', 'Expr.hpp'], 'Stmt', [
        "Block  : List<Stmt> stmts",
        "Expr   : Expr expr",
        "If     : Expr cond, Stmt thenBranch, Stmt elseBranch",
        "While  : Expr cond, Stmt body",
        "Return : Token keyword, Expr value",
        "Print  : Expr expr",
        "Var    : Token name, Expr initializer",
        "Fun    : Token name, List<Token> params, List<Stmt> body",
        "Class  : Token name, VariableExpr superclass, List<FunStmt> methods",
    ])